/*! sassyjson - v0.0.2 - 2014-01-14 */
@function _throw($string, $position) {
  @warn "ERROR::#{$position}::#{$string}";
  @return ($position, false);
}
@function _trim($characters, $position) {
  $length: length($characters);
  @while $position <= $length {
    $char: nth($characters, $position);

    @if $char == ' ' {
      $position: $position + 1;
    }

    @else {
      @return $position;
    }
  }

  @return $position;
}
@function json-decode--value($characters, $position, $source) {
  $length: length($characters);
  $position: _trim($characters, $position);
  
  @while $position <= $length {
    $char: nth($characters, $position);
    $position: $position + 1;
    
    @if $char == '{' {
      @return json-decode--map($characters, $position, $source);
    }
    @else if $char == '[' {
      @return json-decode--list($characters, $position, $source);
    }
    @else if $char == 't' {
      @return json-decode--true($characters, $position);
    }
    @else if $char == 'f' {
      @return json-decode--false($characters, $position);
    }
    @else if $char == '"' {
      @return json-decode--string($characters, $position, $source);
    }
    @else if $char == 'n' {
      @return json-decode--null($characters, $position);
    }
    @else if index('1' '2' '3' '4' '5' '6' '7' '8' '9' '0' '-' '.', $char) {
      @return json-decode--number($characters, $position);
    }
    @else {
      @return _throw("Unexpected token `" + $char + "`.", $position);
    }
  }
  
  @return _throw("Empty JSON string.", $position);
}
@function json-decode--true($characters, $position) {
  $length: length($characters);
  @if $length - $position < 2 
  or nth($characters, $position) != 'r' 
  or nth($characters, $position + 1) != 'u'
  or nth($characters, $position + 2) != 'e' {
    @return _throw("Unexpected token: `t`.", $position);
  }
  $position: $position + 3;
  @return ($position, true);
}

@function json-decode--false($characters, $position) {
  $length: length($characters);
  @if $length - $position < 3 
  or nth($characters, $position) != 'a' 
  or nth($characters, $position + 1) != 'l'
  or nth($characters, $position + 2) != 's'
  or nth($characters, $position + 3) != 'e' {
    @return _throw("Unexpected token: `f`.", $position);
  }
  $position: $position + 4;
  @return ($position, false);
}
@function json-decode--null($characters, $position) {
  $length: length($characters);
  @if $length - $position < 2 
  or nth($characters, $position) != 'u' 
  or nth($characters, $position + 1) != 'l'
  or nth($characters, $position + 2) != 'l' {
    @return _throw("Unexpected token: `n`.", $position);
  }
  $position: $position + 3;
  @return ($position, null);
}
@function json-decode--list($characters, $position, $source) {
  $length: length($characters);
  $position: _trim($characters, $position);
  $list: ();
  $needs-comma: false;
  
  @if $position <= $length and nth($characters, $position) == "]" {
    @return ($position, $list);
  }

  @while $position <= $length {
    $char: nth($characters, $position);

    @if $char == "]" {
      @if not $needs-comma {
        @return _throw("Unexpected comma in array literal.", $position);
      }
      $position: $position + 1;
      @return ($position, $list);
    }
    
    @else if $char == "," {
      @if not $needs-comma {
        @return _throw("Unexpected comma in array literal.", $position);
      }
      $needs-comma: false;
      $position: $position + 1;
    }
    
    @else {
      @if $needs-comma {
        @return _throw("Missing comma in array literal.", $position);
      }
      $read: json-decode--value($characters, $position, $source);
      $position: nth($read, 1);
      $list: append($list, nth($read, 2));
      $needs-comma: true;
    }
    
    $position: _trim($characters, $position);
  }
  
  @return _throw("Unterminated array literal.", $position);
}
@function json-decode--map($characters, $position, $source) {
  $length: length($characters);
  $position: _trim($characters, $position);
  $map: ();
  $needs-comma: false;
  
  @if $position <= $length and nth($characters, $position) == "}" {
    @return ($position, $map);
  }
  
  @while $position <= $length {
    $char: nth($characters, $position);
    $position: $position + 1;
    
    @if $char == "}" {
      @if not $needs-comma {
        @return _throw("Unexpected comma in object literal.", $position);
      }
      @return ($position, $map);
    }
    @else if $char == "," {
      @if not $needs-comma {
        @return _throw("Unexpected comma in object literal.", $position);
      }
      $needs-comma: false;
    }
    @else if $char == '"' {
      @if $needs-comma {
        @return _throw("Missing comma in object literal.", $position);
      }
      
      $read-key: json-decode--string($characters, $position, $source);
      $position: nth($read-key, 1);
      $key: nth($read-key, 2);
      $position: _consume($characters, $position, ':');
      $read-value: json-decode--value($characters, $position, $source);
      $position: nth($read-value, 1);
      $value: nth($read-value, 2);

      $map: map-merge($map, ($key: $value));
      $needs-comma: true;
    }
    @else {
      @return _throw("Unexpected token in object literal.", $position);
    }
    $position: _trim($characters, $position);
  }
  @return _throw("Unterminated object literal.", $position);
}
@function json-decode--number($characters, $position) {
  $length: length($characters);
  $position: $position - 1;
  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
  $numbers:  0   1   2   3   4   5   6   7   8   9;

  $result: 0;
  $divider: 0;
  $minus: false;

  @while $position <= $length {
    $char: nth($characters, $position);
    $index: index($strings, $char);
    $position: $position + 1;

    @if $char == '-' { $minus: true }
    @else if $char == '.' { $divider: 1 }
    @else {
      $number: nth($numbers, $index);
    
      @if $divider == 0 { 
        $result: $result * 10; 
      }
      @else {
        $divider: $divider * 10;
        $number: $number / $divider;
      }
      
      $result: $result + $number;
      
      @if $position <= $length and not index($strings, nth($characters, $position)) {
        @return ($position, if($minus, $result * -1, $result));
      }
    } 
    
  } 
  
  @return ($position, if($minus, $result * -1, $result));
}
@function json-decode--string($characters, $position, $source) {
  $length: length($characters);
  $position: _trim($characters, $position);
  $string-start: $position;

  @while $position <= $length {
    $char: nth($characters, $position);
    $position: $position + 1;
    
    @if $char == '"' {
      @return ($position, str-slice($source, $string-start, $position - 2));
    }
  }
  
  @return _throw("Unterminated string.", $position);
}
@function json-decode($json) {
  $characters: ();
  $position: 1;
  
  @if $json == null {
    @return _throw("Input string may not be null", $position);
  }
  
  @for $i from 1 through str-length($json) {
    $characters: append($characters, str-slice($json, $i, $i));
  }

  $position: _trim($characters, $position);
  $value: null;
 
  @while $position <= str-length($json) and $value != false {
    $read: json-decode--value($characters, $position, $json);
    $position: nth($read, 1);
    $value: nth($read, 2);
  }

  @return $value;
}
// Proof quote a value
// @param $value: value to be quoted
// @return [string]
@function _proof-quote($value) {
  @return '"' + $value + '"';
}

// JSON.stringify a bool
// @param $bool: bool to be stringified
// @return [bool]
@function _json-encode--bool($boolean) {
  @return $boolean;
}

// JSON.stringify a color
// @param $color: color to be stringified
// @return [color]
@function _json-encode--color($color) {
  @return _proof-quote($color);
}

// JSON.stringify a list
// @param $list: list to be stringified
// @return [list]
@function _json-encode--list($list) {
  $str: "";
  @each $item in $list {
    $str: $str + ', ' + json-encode($item);
  }
  @return '[' + str-slice($str, 3) + ']';
}

// JSON.stringify a map
// @param $map: map to be stringified
// @return [map]
@function _json-encode--map($map) {
  $str: "";
  @each $key, $value in $map {
    $str: $str + ', ' + _proof-quote($key) + ': ' + json-encode($value);
  }
  @return '{' + str-slice($str, 3) + '}';
}

// JSON.stringify a number
// @param $number: number to be stringified
// @return [number]
@function _json-encode--number($number) {
  @return $number;
}

// JSON.stringify a string
// @param $string: string to be stringified
// @return [string]
@function _json-encode--string($string) {
  @return _proof-quote($string);
}

// JSON.stringify a null
// @param $null: a sass null to be stringified
// @return [string] with content null
@function _json-encode--null($null) {
  @return "null";
}

// JSON.stringify a value and pass it as a font-family of head element
// @param $value: value to be stringified
@mixin json-encode($value) {
  head {
    font-family: json-encode($value);
  }
}

// JSON.stringify a value
// @param $value: value to be stringified
// @return [string |  false]
@function json-encode($value) {
  $types: list, map, number, string, bool, color;
  $value-type: type-of($value);
  @if $value-type != null or index($types, $value-type) {
    @return call('_json-encode--#{$value-type}', $value);
  }
  @warn "Unknown type for #{$value}.";
  @return false;
}
