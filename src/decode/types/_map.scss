// JSON.parse an object to a map
@function _json-decode--map($source, $position) {
  $length: str-length($source);
  $position: _trim($source, $position);
  $map: ();
  $needs-comma: false;

  @if $position <= $length and str-slice($source, $position, $position) == "}" {
    @return ($position + 1, $map);
  }

  @while $position <= $length {
    $char: str-slice($source, $position, $position);
    $position: $position + 1;

    @if $char == "}" {
      @if not $needs-comma {
        @return _throw("Unexpected comma in object literal.", $position);
      }
      @return ($position, $map);
    }

    @else if $char == "," {
      @if not $needs-comma {
        @return _throw("Unexpected comma in object literal.", $position);
      }
      $needs-comma: false;
    }

    @else if $char == '"' {
      @if $needs-comma {
        @return _throw("Missing comma in object literal.", $position);
      }

      $read-key:  _json-decode--string($source, $position);
      $position: nth($read-key, 1);
      $key:      nth($read-key, 2);

      $position: _consume($source, $position, ':');

      $read-value: _json-decode--value($source, $position);
      $position: nth($read-value, 1);
      $value:    nth($read-value, 2);

      $map: map-merge($map, ($key: $value));
      $needs-comma: true;
    }

    @else {
      @return _throw("Unexpected token in object literal.", $position);
    }

    $position: _trim($source, $position);
  }

  @return _throw("Unterminated object literal.", $position);
}
