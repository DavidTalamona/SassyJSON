@include describe("The json-decode--string function") {
  @include it("should properly decode strings to string type") {
    @include should(expect(json-decode('""')), to(equal("")));
    @include should(expect(json-decode('"1 px"')), to(equal("1 px")));
    @include should(expect(json-decode('"test"')), to(equal("test")));
    @include should(expect(json-decode('"test with inner spaces"')), to(equal("test with inner spaces")));
    @include should(expect(json-decode('"   test with outer spaces   "')), to(equal("   test with outer spaces   ")));
  }

  @include it("should return false if no end of string is found") {
    @include should(expect(json-decode('"test')), to(equal(false)));
  }

  @include it("should decode to string type") {
    @include should(expect(type-of(json-decode('""'))), to(equal('string')));
    @include should(expect(type-of(json-decode('"1 px"'))), to(equal('string')));
    @include should(expect(type-of(json-decode('"test"'))), to(equal('string')));
    @include should(expect(type-of(json-decode('"test with inner spaces"'))), to(equal('string')));
    @include should(expect(type-of(json-decode('"   test with outer spaces   "'))), to(equal('string')));
  }

  @include it("should decode CSS lengths to number type") {
    $test-1:  json-decode('"-1%"');
    $test-2:  json-decode('"1.5in"');
    $test-3:  json-decode('"-1px"');
    $test-4:  json-decode('"1.5em"');
    $test-5:  json-decode('"-1mm"');
    $test-6:  json-decode('"1.5cm"');
    $test-7:  json-decode('"-1pt"');
    $test-8:  json-decode('"1.5pc"');
    $test-9:  json-decode('"-1ex"');
    $test-10: json-decode('"1.5ch"');
    $test-11: json-decode('"-1vh"');
    $test-12: json-decode('"1.5vw"');
    $test-13: json-decode('"-1rem"');
    $test-14: json-decode('"1.5vmin"');
    $test-15: json-decode('"-1vmax"');
    $test-16: json-decode('"1.5pica"');

    @include should(expect($test-1 ), to(equal(-1%)));
    @include should(expect($test-2 ), to(equal(1.5in)));
    @include should(expect($test-3 ), to(equal(-1px)));
    @include should(expect($test-4 ), to(equal(1.5em)));
    @include should(expect($test-5 ), to(equal(-1mm)));
    @include should(expect($test-6 ), to(equal(1.5cm)));
    @include should(expect($test-7 ), to(equal(-1pt)));
    @include should(expect($test-8 ), to(equal(1.5pc)));
    @include should(expect($test-9 ), to(equal(-1ex)));
    @include should(expect($test-10), to(equal(1.5ch)));
    @include should(expect($test-11), to(equal(-1vh)));
    @include should(expect($test-12), to(equal(1.5vw)));
    @include should(expect($test-13), to(equal(-1rem)));
    @include should(expect($test-14), to(equal(1.5vmin)));
    @include should(expect($test-15), to(equal(-1vmax)));
    @include should(expect($test-16), to(equal(1.5pica)));

    @include should(expect(type-of($test-1 )), to(equal('number')));
    @include should(expect(type-of($test-2 )), to(equal('number')));
    @include should(expect(type-of($test-3 )), to(equal('number')));
    @include should(expect(type-of($test-4 )), to(equal('number')));
    @include should(expect(type-of($test-5 )), to(equal('number')));
    @include should(expect(type-of($test-6 )), to(equal('number')));
    @include should(expect(type-of($test-7 )), to(equal('number')));
    @include should(expect(type-of($test-8 )), to(equal('number')));
    @include should(expect(type-of($test-9 )), to(equal('number')));
    @include should(expect(type-of($test-10)), to(equal('number')));
    @include should(expect(type-of($test-11)), to(equal('number')));
    @include should(expect(type-of($test-12)), to(equal('number')));
    @include should(expect(type-of($test-13)), to(equal('number')));
    @include should(expect(type-of($test-14)), to(equal('number')));
    @include should(expect(type-of($test-15)), to(equal('number')));
    @include should(expect(type-of($test-16)), to(equal('number')));
  }

  @include it("should decode CSS lengths to number type") {   
    @include should(expect(type-of(json-decode('"rgb(100, 100, 100)"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"rgb(100%, 100%, 100%)"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"rgba(100, 100, 100, 0.5)"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"rgba(100%, 100%, 100%, 0.5)"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"hsl(100, 100, 100)"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"hsl(100, 100%, 100%)"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"hsla(100, 100, 100, 0.5)"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"hsla(100, 100%, 100%, 0.5)"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"transparent"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"black"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"silver"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"gray"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"white"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"maroon"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"red"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"purple"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"fuchsia"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"green"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lime"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"olive"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"yellow"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"navy"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"blue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"teal"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"aliceblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"antiquewhite"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"aqua"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"aquamarine"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"azure"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"beige"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"bisque"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"black"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"blanchedalmond"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"blue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"blueviolet"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"brown"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"burlywood"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"cadetblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"chartreuse"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"chocolate"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"coral"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"cornflowerblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"cornsilk"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"crimson"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"cyan"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkcyan"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkgoldenrod"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkgray"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkgreen"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkgrey"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkkhaki"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkmagenta"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkolivegreen"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkorange"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkorchid"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkred"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darksalmon"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkseagreen"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkslateblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkslategray"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkslategrey"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkturquoise"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"darkviolet"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"deeppink"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"deepskyblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"dimgray"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"dimgrey"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"dodgerblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"firebrick"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"floralwhite"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"forestgreen"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"fuchsia"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"gainsboro"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"ghostwhite"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"gold"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"goldenrod"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"gray"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"green"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"greenyellow"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"grey"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"honeydew"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"hotpink"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"indianred"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"indigo"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"ivory"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"khaki"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lavender"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lavenderblush"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lawngreen"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lemonchiffon"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lightblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lightcoral"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lightcyan"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lightgoldenrodyellow"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lightgray"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lightgreen"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lightgrey"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lightpink"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lightsalmon"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lightseagreen"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lightskyblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lightslategray"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lightslategrey"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lightsteelblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lightyellow"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"lime"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"limegreen"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"linen"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"magenta"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"maroon"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"mediumaquamarine"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"mediumblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"mediumorchid"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"mediumpurple"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"mediumseagreen"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"mediumslateblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"mediumspringgreen"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"mediumturquoise"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"mediumvioletred"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"midnightblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"mintcream"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"mistyrose"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"moccasin"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"navajowhite"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"navy"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"oldlace"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"olive"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"olivedrab"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"orange"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"orangered"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"orchid"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"palegoldenrod"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"palegreen"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"paleturquoise"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"palevioletred"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"papayawhip"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"peachpuff"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"peru"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"pink"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"plum"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"powderblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"purple"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"red"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"rosybrown"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"royalblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"saddlebrown"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"salmon"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"sandybrown"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"seagreen"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"seashell"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"sienna"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"silver"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"skyblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"slateblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"slategray"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"slategrey"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"snow"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"springgreen"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"steelblue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"tan"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"teal"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"thistle"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"tomato"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"turquoise"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"violet"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"wheat"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"white"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"whitesmoke"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"yellow"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"yellowgreen"'))), to(equal('color')));
  }
}
