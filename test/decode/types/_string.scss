@include describe("The json-decode--string function") {
  @include it("should properly decode strings to string type") {
    @include should(expect(json-decode('""')), to(equal("")));
    @include should(expect(json-decode('"1 px"')), to(equal("1 px")));
    @include should(expect(json-decode('"test"')), to(equal("test")));
    @include should(expect(json-decode('"test with inner spaces"')), to(equal("test with inner spaces")));
    @include should(expect(json-decode('"   test with outer spaces   "')), to(equal("   test with outer spaces   ")));
  }

  @include it("should return false if no end of string is found") {
    @include should(expect(json-decode('"test')), to(equal(false)));
  }

  @include it("should decode to string type") {
    @include should(expect(type-of(json-decode('""'))), to(equal('string')));
    @include should(expect(type-of(json-decode('"1 px"'))), to(equal('string')));
    @include should(expect(type-of(json-decode('"test"'))), to(equal('string')));
    @include should(expect(type-of(json-decode('"test with inner spaces"'))), to(equal('string')));
    @include should(expect(type-of(json-decode('"   test with outer spaces   "'))), to(equal('string')));
  }

  @include it("should decode CSS lengths to number type") {
    $test-1:  json-decode('"-1%"');
    $test-2:  json-decode('"1.5in"');
    $test-3:  json-decode('"-1px"');
    $test-4:  json-decode('"1.5em"');
    $test-5:  json-decode('"-1mm"');
    $test-6:  json-decode('"1.5cm"');
    $test-7:  json-decode('"-1pt"');
    $test-8:  json-decode('"1.5pc"');
    $test-9:  json-decode('"-1ex"');
    $test-10: json-decode('"1.5ch"');
    $test-11: json-decode('"-1vh"');
    $test-12: json-decode('"1.5vw"');
    $test-13: json-decode('"-1rem"');
    $test-14: json-decode('"1.5vmin"');
    $test-15: json-decode('"-1vmax"');
    $test-16: json-decode('"1.5pica"');

    @include should(expect($test-1 ), to(equal(-1%)));
    @include should(expect($test-2 ), to(equal(1.5in)));
    @include should(expect($test-3 ), to(equal(-1px)));
    @include should(expect($test-4 ), to(equal(1.5em)));
    @include should(expect($test-5 ), to(equal(-1mm)));
    @include should(expect($test-6 ), to(equal(1.5cm)));
    @include should(expect($test-7 ), to(equal(-1pt)));
    @include should(expect($test-8 ), to(equal(1.5pc)));
    @include should(expect($test-9 ), to(equal(-1ex)));
    @include should(expect($test-10), to(equal(1.5ch)));
    @include should(expect($test-11), to(equal(-1vh)));
    @include should(expect($test-12), to(equal(1.5vw)));
    @include should(expect($test-13), to(equal(-1rem)));
    @include should(expect($test-14), to(equal(1.5vmin)));
    @include should(expect($test-15), to(equal(-1vmax)));
    @include should(expect($test-16), to(equal(1.5pica)));

    @include should(expect(type-of($test-1 )), to(equal('number')));
    @include should(expect(type-of($test-2 )), to(equal('number')));
    @include should(expect(type-of($test-3 )), to(equal('number')));
    @include should(expect(type-of($test-4 )), to(equal('number')));
    @include should(expect(type-of($test-5 )), to(equal('number')));
    @include should(expect(type-of($test-6 )), to(equal('number')));
    @include should(expect(type-of($test-7 )), to(equal('number')));
    @include should(expect(type-of($test-8 )), to(equal('number')));
    @include should(expect(type-of($test-9 )), to(equal('number')));
    @include should(expect(type-of($test-10)), to(equal('number')));
    @include should(expect(type-of($test-11)), to(equal('number')));
    @include should(expect(type-of($test-12)), to(equal('number')));
    @include should(expect(type-of($test-13)), to(equal('number')));
    @include should(expect(type-of($test-14)), to(equal('number')));
    @include should(expect(type-of($test-15)), to(equal('number')));
    @include should(expect(type-of($test-16)), to(equal('number')));
  }

  @include it("should decode CSS lengths to number type") {   
    @include should(expect(type-of(json-decode('"rgb(100, 100, 100)"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"rgb(100%, 100%, 100%)"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"rgba(100, 100, 100, 0.5)"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"rgba(100%, 100%, 100%, 0.5)"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"hsl(100, 100, 100)"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"hsl(100, 100%, 100%)"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"hsla(100, 100, 100, 0.5)"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"hsla(100, 100%, 100%, 0.5)"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"red"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"blue"'))), to(equal('color')));
    @include should(expect(type-of(json-decode('"green"'))), to(equal('color')));
  }
}
