@include describe("The json-decode--list function") {
  @include it("should properly decode arrays to lists") {
    @include should(expect(json-decode('[0, 1, 2, 3]')), to(equal(0 1 2 3)));
    @include should(expect(json-decode('["a", "b", "c", "d"]')), to(equal("a" "b" "c" "d")));
    @include should(expect(json-decode('[true, false, false, true, true]')), to(equal(true false false true true)));

    @include should(expect(type-of(json-decode('[0, 1, 2, 3]'))), to(equal(list)));
    @include should(expect(type-of(json-decode('["a", "b", "c", "d"]'))), to(equal(list)));
    @include should(expect(type-of(json-decode('[true, false, false, true, true]'))), to(equal(list)));
  }

  @include it("should properly decode multi-dimensional arrays to nested lists") {
    @include should(expect(json-decode('[0, 1, [2, 3, [4, 5], 6]]')), to(equal(0 1 (2 3 (4 5) 6))));
    @include should(expect(json-decode('[["a", "b", ["c", "d"]], "e"]')), to(equal(("a" "b" ("c" "d")) "e")));
    @include should(expect(json-decode('[[true], [false], [false, true], true]')), to(equal((true) (false) (false true) true)));
  }

  @include it("should properly decode arrays with weird spaces to lists") {
    @include should(expect(json-decode('[   0 ,    1    ,    2,3  ]')), to(equal(0 1 2 3)));
  }
}